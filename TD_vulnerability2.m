%% Vulnerability of Temporal Difference Learning with Linear Function Approximation %%
%-------------------------------------------------------------------------% 
% Rewards are generated based on the Huber-Contamination Model
% Attack is carefully designed 
 
%-------------------------------------------------------------------------%
clc; clear all; close all; %#ok<CLALL> 
S=100; % no of states
gamma=0.5; % discount factor
r=10; % rank of feature matrix 

% Note: Length of each feature vector is 'r'.

% Description of Notation
%--------------------------  
% theta_st ---> True fixed point
% P ---> Transition matrix
% R ---> Reward vector
% p ---> Stationary distribution
% phi ---> Feature matrix (Dimension is S by r)

[theta_st,P,R,p,phi]= markov_gen(S,gamma,r); 

%--------------------------------------------------------------------------
% Markov Setting
%--------------------------------------------------------------------------
T=20000; % no of iterations
D=zeros(S,S); % stores the elements of p
for i=1:S
D(i,i)=p(i);
end

Ep=50; % no of epochs over which we average
avg_err=zeros(1,T); % Stores MSE for basic TD
Sm=0;
for k=1:Ep
x=zeros(r,T); % stores iterates of basic recursion
alpha=0.1; % learning rate 
err=zeros(1,T); % error in basic case
err(1,1)=(norm(theta_st))^2;


% initialize from stationary distribution
h=cumsum(p);
z=rand(1);
s_old=find(h > z, 1);

% Design of the Attack vector
eps=0.001; % corruption fraction.
w=100*theta_st; % point to which attacker wishes convergence.
Abar=phi'*D*(gamma*P-eye(S,S))*phi;
Cw=1/(eps)*(D\phi)*((phi'*phi)\Abar)*((1-eps)*theta_st-w); % attack vector
rewstr=zeros(1,T);


for i=1:T
% Generating the next state s_t+1
d=P(s_old,:); % distribution of s_t+1|s_t 
h=cumsum(d);
z=rand(1);
s_new=find(h > z, 1); % new state s_t+1

%------ Generating Corrupted Rewards ----------%
eps=0.01;
z1=rand(1);
% eps=0; % probability of corruption
% Bias=Cw(s_old,1);
% 
% z=rand(1);
% 

if (z1 <= eps)
    rew=Cw(s_old,1);
else
    rew=R(s_old,1);
end
rewstr(1,i)=rew;

%----------------------------------------------%

%--------- Basic TD Update --------------------%
g=(rew+gamma*(phi(s_new,:))*x(:,i)-(phi(s_old,:))*x(:,i))*(phi(s_old,:))';
alpha=20/i;
x(:,i+1)=x(:,i)+alpha*g;
err(:,i)=(norm(theta_st-x(:,i)))^2;
%----------------------------------------------%
s_old=s_new; % continuity of trajectory
end
avg_err=avg_err+err;
Sm=Sm+sum(rewstr)/T;
end

figure
plot(avg_err/Ep, 'r', 'LineWidth',2);
hold on;
xlim([1 T]);
ax=gca;
set(ax, 'fontsize',15, 'fontname', 'times','FontWeight','bold');
ax.LineWidth=1.2;
xlab=xlabel('${{t}}$','Interpreter','latex');
set(xlab,'fontsize',30,'fontname', 'times','FontWeight','bold');
ylab=ylabel('$E_t$','Interpreter','latex');
set(ylab,'fontsize',30, 'fontname', 'times','FontWeight','bold');
grid on;

ax = gca;
ax.XAxis.LineWidth = 1.5;
ax.YAxis.LineWidth = 1.5;
outerpos = ax.OuterPosition;
ti = ax.TightInset; 
left = outerpos(1) + ti(1);
bottom = outerpos(2) + ti(2);
ax_width = outerpos(3) - ti(1) - ti(3)-0.01;
ax_height = outerpos(4) - ti(2) - ti(4)-0.01;
ax.Position = [left bottom ax_width ax_height]; 
